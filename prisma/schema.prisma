generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  nickname   String?
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  SMSToken   SMSToken[]
  Ritual     Ritual[]
  Post       Post[]
  Comment    Comment[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Ritual {
  id         Int      @id @default(autoincrement())
  title      String
  subtitle   String
  start      DateTime
  end        DateTime
  time       String
  category   String
  period     String
  price      Int
  photo      String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  photo     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
